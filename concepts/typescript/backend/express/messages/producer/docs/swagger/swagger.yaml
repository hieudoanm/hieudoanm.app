---
components:
  examples: {}
  headers: {}
  parameters: {}
  requestBodies: {}
  responses: {}
  schemas: {}
  securitySchemes: {}
info:
  title: '@messages/producer'
  version: '0.0.1'
  description: 'Messages Producer'
  license:
    name: 'GPL-3.0'
  contact:
    name: 'hieudoanm '
    email: 'hieumdoan@gmail.com'
openapi: '3.0.0'
paths:
  /activemq/produce:
    post:
      operationId: 'Produce'
      responses:
        200:
          description: 'Ok'
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: 'string'
                required:
                  - 'status'
                type: 'object'
      tags:
        - 'ActiveMQ'
      security: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                message:
                  type: 'string'
              required:
                - 'message'
              type: 'object'
  /health:
    get:
      operationId: 'Get'
      responses:
        200:
          description: 'Ok'
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: 'string'
                required:
                  - 'status'
                type: 'object'
      tags:
        - 'Health'
      security: []
      parameters: []
  /kafka/produce:
    post:
      operationId: 'Produce'
      responses:
        200:
          description: 'Ok'
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: 'string'
                required:
                  - 'status'
                type: 'object'
      tags:
        - 'Kafka'
      security: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                message:
                  type: 'string'
              required:
                - 'message'
              type: 'object'
  /rabbitmq/produce:
    post:
      operationId: 'Produce'
      responses:
        200:
          description: 'Ok'
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: 'string'
                required:
                  - 'status'
                type: 'object'
      tags:
        - 'RabbitMQ'
      security: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                message:
                  type: 'string'
              required:
                - 'message'
              type: 'object'
  /redis/produce:
    post:
      operationId: 'Produce'
      responses:
        200:
          description: 'Ok'
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: 'string'
                    enum:
                      - 'success'
                    nullable: false
                required:
                  - 'status'
                type: 'object'
      tags:
        - 'Redis'
      security: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                message:
                  type: 'string'
              required:
                - 'message'
              type: 'object'
servers:
  - url: '/'
